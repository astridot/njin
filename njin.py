import os as o;from base64 import b64decode as d;import sys as s
"""
███╗░░██╗░░░░░██╗██╗███╗░░██╗
████╗░██║░░░░░██║██║████╗░██║
██╔██╗██║░░░░░██║██║██╔██╗██║
██║╚████║██╗░░██║██║██║╚████║
██║░╚███║╚█████╔╝██║██║░╚███║
╚═╝░░╚══╝░╚════╝░╚═╝╚═╝░░╚══╝


-- welcome to your njin

your system is running njin3
~ check https://javolinn.wixsite.com/garnet for updates


[ ~~via cmd and powershell~~ ] 'py njin.py' to run

njin is the best, most memory-efficient and compact
launcher that supports almost all file types.
"""
with open(".nji","w")as f:f.write(d("").decode())
o.system(f"py .nji {" ".join(s.argv[1:])}");o.remove(".nji")
