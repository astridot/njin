import os as o;from base64 import b64decode as d;import sys as s
"""
███╗░░██╗░░░░░██╗██╗███╗░░██╗
████╗░██║░░░░░██║██║████╗░██║
██╔██╗██║░░░░░██║██║██╔██╗██║
██║╚████║██╗░░██║██║██║╚████║
██║░╚███║╚█████╔╝██║██║░╚███║
╚═╝░░╚══╝░╚════╝░╚═╝╚═╝░░╚══╝


-- welcome to your njin

your system is running njin3.1
~ check https://javolinn.wixsite.com/garnet for updates

https://github.com/enjiprobably/njin/main/documentation.py for documentation

wondering where the code is? njin automatically deploys a file when ran!

commands (cmd and powershell compatible):
~ py njin.py ~ run ./.n
~ py njin.py file.n ~ run ./file.n
~ py njin.py -help ~ get help for njin
~ py njin.py -cl ~ launch the njin command line interface

njin 2024 developed by enjiprobably from JΛVOLINN STUDIOS
[-] github.com/enjiprobably/njin
"""
V="njin3.1";with open(".nji","w") as f:f.write(d("").decode())
o.system(f"py .nji {" ".join(s.argv[1:])}");o.remove(".nji")
